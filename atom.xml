<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhx6.github.io</id>
    <title>皮皮虎&apos;s Blog</title>
    <updated>2021-12-29T10:47:31.501Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhx6.github.io"/>
    <link rel="self" href="https://zhx6.github.io/atom.xml"/>
    <subtitle>出言有尺，嬉闹有度，做事有余，说话有德。</subtitle>
    <logo>https://zhx6.github.io/images/avatar.png</logo>
    <icon>https://zhx6.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 皮皮虎&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[用 Alpine.js 构建一个 ajax 表单]]></title>
        <id>https://zhx6.github.io/aPQPd4Z5x/</id>
        <link href="https://zhx6.github.io/aPQPd4Z5x/">
        </link>
        <updated>2021-12-29T10:28:37.000Z</updated>
        <content type="html"><![CDATA[<p>不解释Alpine.js是啥了，感兴趣的小伙伴自行百度，类似轻量Vue框架吧？这篇教程就带着大家入门一下</p>
<p>首先，让我们建立一个像这样的常规联系表格：<br>
<img src="https://zhx6.github.io/post-images/1640773740184.jpg" alt="" loading="lazy"><br>
关键问题是我们如何将通过 ajax 发送数据并使用 Alpine 处理所有表单数据。 大家之前应该已经用 vanilla JS 或 jQuery 做过无数次了。常规方式必须通过引用获取所有元素，访问它们的值，然后发送数据。 Alpine可以使这项任务变得轻而易举，类似Vue和其他前端框架那样。</p>
<p>下面我们建立一个简单的表单（姓名、电子邮件、消息提交按钮）</p>
<pre><code class="language-html">&lt;form action=&quot;/contact&quot; method=&quot;POST&quot; class=&quot;w-64 mx-auto&quot;&gt;
    &lt;div class=&quot;mb-4&quot;&gt;
        &lt;label class=&quot;block mb-2&quot;&gt;Name:&lt;/label&gt;
        &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;border w-full p-1&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;mb-4&quot;&gt;
        &lt;label class=&quot;block mb-2&quot;&gt;E-mail:&lt;/label&gt;
        &lt;input type=&quot;email&quot; name=&quot;email&quot; class=&quot;border w-full p-1&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;mb-4&quot;&gt;
        &lt;label class=&quot;block mb-2&quot;&gt;Message:&lt;/label&gt;
        &lt;textarea name=&quot;message&quot; class=&quot;border w-full p-1&quot;&gt;&lt;/textarea&gt;
    &lt;/div&gt;
    &lt;button class=&quot;bg-gray-700 hover:bg-gray-800 text-white w-full p-2&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre>
<p>这就是表单的基本 HTML 结构。 到目前为止，根本没有 javascript，它只是一个可以与页面重新加载一起使用的常规表单。 现在，让我们在上面撒一些 Alpine.js。 如下所示：</p>
<pre><code class="language-html">&lt;script&gt;
    function contactForm() {
      return {
        formData: {
          name: '',
          email: '',
          message: ''
        },
      }
    }
&lt;/script&gt;
</code></pre>
<p>然后你只需要在里面添加那个函数调用<code>x-data</code>：</p>
<pre><code class="language-html">&lt;form action=&quot;/contact&quot; method=&quot;POST&quot; class=&quot;w-64 mx-auto&quot; x-data=&quot;contactForm()&quot;&gt;
</code></pre>
<p>现在，介绍一下<code>x-model</code>指令。 这个指令可以使输入元素与组件数据保持同步。 因为<code>formData</code>在组件范围内有对象，因此我们可以在输入和文本区域中使用它们，如下所示：</p>
<pre><code class="language-html">&lt;form action=&quot;/contact&quot; method=&quot;POST&quot; class=&quot;w-64 mx-auto&quot; x-data=&quot;contactForm()&quot;&gt;
    &lt;div class=&quot;mb-4&quot;&gt;
      &lt;label class=&quot;block mb-2&quot;&gt;Name:&lt;/label&gt;
      &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;border w-full p-1&quot; x-model=&quot;formData.name&quot;&gt;
    &lt;/div&gt;
 
    &lt;div class=&quot;mb-4&quot;&gt;
      &lt;label class=&quot;block mb-2&quot;&gt;E-mail:&lt;/label&gt;
      &lt;input type=&quot;email&quot; name=&quot;email&quot; class=&quot;border w-full p-1&quot; x-model=&quot;formData.email&quot;&gt;
    &lt;/div&gt;
 
    &lt;div class=&quot;mb-4&quot;&gt;
      &lt;label class=&quot;block mb-2&quot;&gt;Message:&lt;/label&gt;
      &lt;textarea name=&quot;message&quot; class=&quot;border w-full p-1&quot; x-model=&quot;formData.message&quot;&gt;&lt;/textarea&gt;
    &lt;/div&gt;
    &lt;button class=&quot;bg-gray-700 hover:bg-gray-800 text-white w-full p-2&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre>
<p>在<strong>vanilla JavaScript</strong>中，可能必须使用类似的内容获取元素，<code>getElementById</code>然后访问其值。 有了<code>x-model</code>，当输入<strong>input</strong>元素时，数据对象会自动更新为输入的任何内容。</p>
<p>现在，至于 ajax 部分，让我们只使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">fetch API</a>，因此我们不必拉外部依赖项，但您当然可以根据自己的需要进行调整：</p>
<pre><code class="language-html">function contactForm() {
    return {
        formData: {
            name: '',
            email: '',
            message: ''
        },
        message: '',
 
        submitData() {
            this.message = ''
 
            fetch('/contact', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(this.formData)
            })
            .then(() =&gt; {
                this.message = 'Form sucessfully submitted!'
            })
            .catch(() =&gt; {
                this.message = 'Ooops! Something went wrong!'
            })
        }
    }
}
</code></pre>
<p>并在表单结束标记之前添加此段落：</p>
<pre><code class="language-html">&lt;p x-text=&quot;message&quot;&gt;&lt;/p&gt;
</code></pre>
<p>如果你不明白<code>.then</code>and<code>.catch</code>语句是 什么 ，别担心，你可以查看这篇关于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promises 的</a>文章。基本上，整个<code>submitData</code>方法将对<code>/contact</code>路由执行 POST 请求 ，并将表单数据作为字符串化 JSON 传递。 如果一切都成功，<code>.then</code>则执行块，如果响应中有错误，则执行<code>.catch</code>。</p>
<p>现在，我们必须在提交表单时调用此方法。 表单元素发出一个<code>submit</code>事件，所以我们可以使用<code>x-on</code>指令来监听它 ，因为我们不想重新加载页面，所以我们添加<code>.prevent</code>事件修饰符来“劫持”表单提交并使用我们自己的方法“submitData” ：</p>
<pre><code class="language-html">&lt;form action=&quot;/contact&quot; method=&quot;POST&quot; class=&quot;w-64 mx-auto&quot; x-data=&quot;contactForm()&quot; @submit.prevent=&quot;submitData&quot;&gt;
</code></pre>
<p>就是这样！ 这样就获得了一个使用 Alpine.js 构建的可工作的 ajax 表单。 我们可以再加点东西，为提交按钮添加一些动态样式以改善用户体验：</p>
<p>在头部添加这个样式标签（我只会添加这个样式，因为到目前为止，TailwindCSS 不支持开箱即用的禁用状态）：</p>
<pre><code class="language-html">&lt;style&gt;
    button:disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }
&lt;/style&gt;
</code></pre>
<p>现在，用这个替换旧的提交按钮：</p>
<pre><code class="language-html">&lt;button class=&quot;bg-gray-700 hover:bg-gray-800 disabled:opacity-50 text-white w-full p-2 mb-4&quot; x-text=&quot;buttonLabel&quot; :disabled=&quot;loading&quot;&gt;&lt;/button&gt;
</code></pre>
<p>再介绍两个有趣的属性<code>x-text</code>指令和<code>:disabled</code>。我们将使用<code>x-text</code>来动态更改按钮的标签<code>:disabled</code>，并在提交表单时禁用该按钮。</p>
<p><code>contactForm</code>使用以下内容更新函数：</p>
<pre><code class="language-html">loading: false,
buttonLabel: 'Submit',
 
submitData() {
    this.buttonLabel = 'Submitting...'
    this.loading = true;
    this.message = ''
 
    fetch('/contact', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(this.formData)
    })
    .then(() =&gt; {
        this.message = 'Form sucessfully submitted!'
    })
    .catch(() =&gt; {
        this.message = 'Ooops! Something went wrong!'
    })
    .finally(() =&gt; {
        this.loading = false;
        this.buttonLabel = 'Submit'
    })
}
</code></pre>
<p>就是这样！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Telnet为什么不安全]]></title>
        <id>https://zhx6.github.io/CLWxuTMTo/</id>
        <link href="https://zhx6.github.io/CLWxuTMTo/">
        </link>
        <updated>2021-12-29T10:21:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>Telnet（Teletype Network）属于<strong>应用层</strong>，默认端口为<strong>23</strong>，是一个<strong>明文传送协议</strong>（包括用户名、密码、内容都在互联网上传送），同时分为客户端与服务端进行交互。</p>
<h2 id="流程">流程</h2>
<p>Wireshark抓包图如下<br>
<img src="https://zhx6.github.io/post-images/1640773447742.jpg" alt="" loading="lazy"><br>
通过分析数据包，Telnet整个流程分为四个阶段为了更好理解如下图所示<br>
<img src="https://zhx6.github.io/post-images/1640773466870.jpg" alt="" loading="lazy"></p>
<h3 id="第一阶段tcp三次握手">第一阶段：TCP三次握手</h3>
<p>很显然，Telnet协议是TCP/IP协议族的一员。由客户端主动向目标服务端建立连接。（三次握手这里暂时不展开讲）</p>
<h3 id="第二阶段双方通过nvt协商">第二阶段：双方通过NVT协商</h3>
<p>Telnet协议支持应用不同的操作系统中，并可以很好的在不同操作系统中传输命令；通俗来讲NVT起到了翻译的作用，支持异构性。协商的内容包括窗口大小、工作模式等等。</p>
<h3 id="第三阶段双通过nvt传输命令">第三阶段：双通过NVT传输命令</h3>
<p>双方协商完成后，服务端回显给客户端登录命令行，进行验证，验证通过后进行后续的命令操作。</p>
<h3 id="第四阶段撤销tcp连接">第四阶段：撤销TCP连接</h3>
<p>客户端对服务端进行撤销连接，此时是一个TCP链接；双方进行FIN，ACK。</p>
<h2 id="数据">数据：</h2>
<p>由于Telnet是明文传输，很容易被抓到进行分析从而入侵主机；一旦被攻击者抓到包，这个就相当于在裸跑，毫无秘密可言。<br>
<img src="https://zhx6.github.io/post-images/1640773612813.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 获取每日BING图 并且缓存URL链接到本地JSON]]></title>
        <id>https://zhx6.github.io/d8K-PzlGJ/</id>
        <link href="https://zhx6.github.io/d8K-PzlGJ/">
        </link>
        <updated>2021-12-29T03:43:06.000Z</updated>
        <content type="html"><![CDATA[<p>将获取的BING图链接进行缓存，减少服务器负担，提升访问速度。</p>
<pre><code class="language-php">&lt;?php
$filename = &quot;./cache.json&quot;;
if (file_exists($filename) === false) {
    file_put_contents($filename, &quot;&quot;);
}
$handle = fopen($filename, &quot;r&quot;);
$contents = fread($handle, filesize($filename));
fclose($handle);
$contents = json_decode($contents, true);
if (filesize($filename) === 0) {
    getBingImg();
} else {
    if ($contents['time'] === date(&quot;Ymd&quot;)) {
        Header(&quot;Location: &quot; . $contents['url']);
    } else {
        getBingImg();
    }
}
function getBingImg()
{
    $str = json_decode(file_get_contents('https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'));
    if (isset($str-&gt;images[0])) {
        $impurely = 'https://cn.bing.com' . $str-&gt;images[0]-&gt;url;
    } else {
        $impurely = false;
    }
    if ($impurely) {
        global $contents;
        if ($contents['url'] !== $impurely) {
            global $filename;
            $data = array(
                &quot;time&quot; =&gt; date(&quot;Ymd&quot;),
                &quot;url&quot; =&gt; $impurely
            );
            $data = json_encode($data);
            file_put_contents($filename, $data);
        }
        Header(&quot;Location: &quot; . $impurely);
        exit();
    } else {
        exit('error');
    }
}
?&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[添加网页动态滚动进度条|滚动指示器]]></title>
        <id>https://zhx6.github.io/lU92bYTeX/</id>
        <link href="https://zhx6.github.io/lU92bYTeX/">
        </link>
        <updated>2021-12-29T03:40:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="代码">代码</h2>
<pre><code class="language-php">&lt;!--动态滚动进度条--&gt;
&lt;div class=&quot;scroll-line&quot; style=&quot;z-index: 999;position: fixed;height: 3px;margin-top: 0px;background-color: #6B999B;width: 0%;&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    $(window).scroll(function() {
        var winTop = $(window).scrollTop(), //滚动条的位置
                docHeight = $(document).height(),   //文档高度
                winHeight = $(window).height(); //窗口高度
 
        var scrolled = (winTop / (docHeight - winHeight))*100;
 
        $('.scroll-line').css('width', (scrolled + '%'));
    });
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python float乘法运算小数点后会出现很多位小数问题]]></title>
        <id>https://zhx6.github.io/A88jsrz2/</id>
        <link href="https://zhx6.github.io/A88jsrz2/">
        </link>
        <updated>2021-12-28T17:00:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>说实话 这问题挺艹蛋的，我调试了半天，发现是Python所有浮点数规范遵从IEEEE754二进制浮点数算术标准（ANSI/IEEE Std 754-1985），说一下我想实现什么吧，就是出价的数字</p>
<pre><code>出价 78.6
换算成程序出价是要乘个100000
真实结果：7860000
</code></pre>
<h2 id="错误代码">错误代码</h2>
<pre><code>(78 + round(random.uniform(1, 0), 2)) * 100000
</code></pre>
<h3 id="运行结果">运行结果</h3>
<pre><code>7880000.0
7816000.0
7859000.0
7834999.999999999
7820999.999999999
7859999.999999999
</code></pre>
<p>这肯定不对的啊.....<br>
后来查到一篇文章讲了这个 <a href="https://xufive.blog.csdn.net/article/details/103816159">https://xufive.blog.csdn.net/article/details/103816159</a><br>
真是太恶心了</p>
<h2 id="解决方法">解决方法</h2>
<pre><code>from decimal import *
Decimal((78 + round(random.uniform(1, 0), 2)) * 100000).quantize(Decimal('0'))
</code></pre>
<p>用了Decimal模块完美解决此问题</p>
<h3 id="结果">结果</h3>
<pre><code>7844000
7898000
7900000
7825000
7872000
7843000
7810000
7866000
7807000
7836000
7826000
7803000
7832000
7868000
7851000
7868000
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[国内开源镜像站点汇总]]></title>
        <id>https://zhx6.github.io/HS8j95/</id>
        <link href="https://zhx6.github.io/HS8j95/">
        </link>
        <updated>2021-12-28T16:47:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="站点版">站点版</h2>
<h3 id="企业站">企业站</h3>
<p>搜狐：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a><br>
腾讯：<a href="https://mirrors.cloud.tencent.com/">https://mirrors.cloud.tencent.com/</a><br>
网易：<a href="http://mirrors.163.com/">http://mirrors.163.com/</a><br>
阿里：<a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com/</a><br>
华为：<a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com/</a></p>
<h3 id="教育站">教育站</h3>
<p>上海交通大学：<a href="http://ftp.sjtu.edu.cn/html/resources.xml">http://ftp.sjtu.edu.cn/html/resources.xml</a>（部分移动运营商出口状况不佳，无法访问）<br>
华中科技大学：<a href="http://mirror.hust.edu.cn/">http://mirror.hust.edu.cn/</a>（当前已用容量估计：4.83T）<br>
清华大学：<a href="http://mirrors.tuna.tsinghua.edu.cn/">http://mirrors.tuna.tsinghua.edu.cn/</a>（当前已用容量估计：9.8T）<br>
北京理工大学：<a href="http://mirror.bit.edu.cn/web/">http://mirror.bit.edu.cn/web/</a><br>
兰州大学：<a href="http://mirror.lzu.edu.cn/">http://mirror.lzu.edu.cn/</a><br>
中国科技大学：<a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a>（当前已用容量估计：21.32T）<br>
大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/">http://mirrors.neusoft.edu.cn/</a>（当前已用容量估计：2.5T）<br>
东北大学：<a href="http://mirror.neu.edu.cn/">http://mirror.neu.edu.cn/</a><br>
大连理工大学：<a href="http://mirror.dlut.edu.cn/">http://mirror.dlut.edu.cn/</a><br>
哈尔滨工业大学：<a href="http://run.hit.edu.cn/html/">http://run.hit.edu.cn/html/</a>（部分联通运营商出口状况不佳，无法访问）<br>
北京交通大学：<a href="http://mirror.bjtu.edu.cn/cn/">http://mirror.bjtu.edu.cn/cn/</a><br>
中国地质大学：<a href="http://mirrors.cug.edu.cn/">http://mirrors.cug.edu.cn/</a>（当前已用容量估计：2.3T）<br>
浙江大学：<a href="http://mirrors.zju.edu.cn/">http://mirrors.zju.edu.cn/</a><br>
厦门大学：<a href="http://mirrors.xmu.edu.cn/">http://mirrors.xmu.edu.cn/</a><br>
中山大学：<a href="http://mirror.sysu.edu.cn/">http://mirror.sysu.edu.cn/</a><br>
重庆大学：<a href="http://mirrors.cqu.edu.cn/">http://mirrors.cqu.edu.cn/</a>（当前已用容量估计：3.93T）<br>
北京化工大学：<a href="http://ubuntu.buct.edu.cn/">http://ubuntu.buct.edu.cn/</a>（AndroidSDK镜像仅供校内使用，当前已用容量估计：1.72T）<br>
南阳理工学院：<a href="http://mirror.nyist.edu.cn/">http://mirror.nyist.edu.cn/</a><br>
中国科学院：<a href="http://www.opencas.org/mirrors/">http://www.opencas.org/mirrors/</a><br>
电子科技大学星辰工作室：<a href="http://mirrors.stuhome.net/">http://mirrors.stuhome.net/</a>（当前已用容量估计：1.08T）<br>
西北农林科技大学：<a href="http://mirrors.nwsuaf.edu.cn/">http://mirrors.nwsuaf.edu.cn/</a>（只做CentOS镜像，当前已用容量估计：140GB）</p>
<h3 id="其他站">其他站</h3>
<p>首都在线科技股份有限公司（英文名CapitalOnlineDataService）：<a href="http://mirrors.yun-idc.com/">http://mirrors.yun-idc.com/</a><br>
常州贝特康姆软件技术有限公司：<a href="http://centos.bitcomm.cn/">http://centos.bitcomm.cn/</a>（只做CentOS镜像，当前已用容量估计：140GB）<br>
公云PubYun（母公司为贝特康姆）：<a href="http://mirrors.pubyun.com/">http://mirrors.pubyun.com/</a><br>
中国互联网络信息中心：<a href="http://mirrors.cnnic.cn/">http://mirrors.cnnic.cn/</a>（只做Apache镜像，当前已用容量估计：120GB）</p>
<h2 id="软件版">软件版</h2>
<h3 id="操作系统类">操作系统类</h3>
<h4 id="ubuntu">Ubuntu</h4>
<p>阿里云：<a href="http://mirrors.aliyun.com/ubuntu-releases/">http://mirrors.aliyun.com/ubuntu-releases/</a><br>
网易：<a href="http://mirrors.163.com/ubuntu-releases/">http://mirrors.163.com/ubuntu-releases/</a><br>
搜狐：<a href="http://mirrors.sohu.com/ubuntu-releases/">http://mirrors.sohu.com/ubuntu-releases/</a>（搜狐在12年之后似乎不同步了）<br>
首都在线科技股份有限公司：<a href="http://mirrors.yun-idc.com/ubuntu-releases/">http://mirrors.yun-idc.com/ubuntu-releases/</a></p>
<h4 id="centos">CentOS</h4>
<p>网易：<a href="http://mirrors.163.com/centos/">http://mirrors.163.com/centos/</a><br>
搜狐：<a href="http://mirrors.sohu.com/centos/">http://mirrors.sohu.com/centos/</a><br>
阿里云：<a href="http://mirrors.aliyun.com/centos/">http://mirrors.aliyun.com/centos/</a></p>
<h4 id="tomcat-apache">Tomcat、Apache</h4>
<p>中国互联网络信息中心：<a href="http://mirrors.cnnic.cn/apache/">http://mirrors.cnnic.cn/apache/</a><br>
华中科技大学：<a href="http://mirrors.hust.edu.cn/apache/">http://mirrors.hust.edu.cn/apache/</a></p>
<h4 id="mysql">MySQL</h4>
<p>搜狐：<a href="http://mirrors.sohu.com/mysql">http://mirrors.sohu.com/mysql</a><br>
中国科技技术大学：<a href="http://mirrors.ustc.edu.cn/mysql-ftp/Downloads">http://mirrors.ustc.edu.cn/mysql-ftp/Downloads</a></p>
<h4 id="postgresql">PostgreSQL</h4>
<p>浙江大学：<a href="http://mirrors.zju.edu.cn/postgresql/">http://mirrors.zju.edu.cn/postgresql/</a></p>
<h4 id="mariadb">MariaDB</h4>
<p>中国科技技术大学：<a href="https://mirrors.ustc.edu.cn/mariadb/">https://mirrors.ustc.edu.cn/mariadb/</a></p>
<h4 id="videolan">VideoLAN</h4>
<p>大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/videolan/">http://mirrors.neusoft.edu.cn/videolan/</a><br>
中国科技大学：<a href="http://mirrors.ustc.edu.cn/videolan-ftp/">http://mirrors.ustc.edu.cn/videolan-ftp/</a></p>
<h3 id="开发工具类">开发工具类</h3>
<h4 id="eclipse">Eclipse</h4>
<p>中国科技大学：<a href="http://mirrors.ustc.edu.cn/eclipse/">http://mirrors.ustc.edu.cn/eclipse/</a><br>
东北大学B：<a href="http://mirror.neu.edu.cn/eclipse/">http://mirror.neu.edu.cn/eclipse/</a></p>
<h2 id="官方镜像列表状态地址">官方镜像列表状态地址</h2>
<p>CentOS：<a href="http://mirror-status.centos.org/#cn">http://mirror-status.centos.org/#cn</a><br>
Archlinux：<a href="https://www.archlinux.org/mirrors/status/">https://www.archlinux.org/mirrors/status/</a><br>
Ubuntu：<a href="https://launchpad.net/ubuntu/+cdmirrors">https://launchpad.net/ubuntu/+cdmirrors</a><br>
Debian：<a href="http://mirror.debian.org/status.html">http://mirror.debian.org/status.html</a><br>
FedoraLinux/FedoraEPEL：<a href="https://admin.fedoraproject.org/mirrormanager/mirrors">https://admin.fedoraproject.org/mirrormanager/mirrors</a><br>
Apache：<a href="http://www.apache.org/mirrors/#cn">http://www.apache.org/mirrors/#cn</a><br>
Cygwin：<a href="https://www.cygwin.com/mirrors.html">https://www.cygwin.com/mirrors.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python在Linux后台运行]]></title>
        <id>https://zhx6.github.io/python-zai-linux-hou-tai-yun-xing/</id>
        <link href="https://zhx6.github.io/python-zai-linux-hou-tai-yun-xing/">
        </link>
        <updated>2021-12-28T16:32:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>写了一个python任务脚本，需要一直运行，刚开始使用了宝塔应用管理器和python管理器，都会出现运行着就停止运行的情况，而且上面还是显示在运行着....于是打算直接使用nohup运行</p>
<h2 id="方法">方法</h2>
<ul>
<li>先进入脚本文件的根目录</li>
</ul>
<pre><code>cd /www/Python/Auto/qianchuan/jiankong
</code></pre>
<ul>
<li>使用nohup运行</li>
</ul>
<pre><code>nohup python -u main.py &gt; message.log 2&gt;&amp;1 &amp;
</code></pre>
<h2 id="解释">解释</h2>
<h3 id="nohup-和-的区别">nohup 和 &amp; 的区别</h3>
<ol>
<li>&amp;<br>
是指在后台运行，但当用户退出(挂起)的时候，命令自动也跟着退出</li>
<li>nohup</li>
</ol>
<p>运行 nohup --help<br>
Run COMMAND, ignoring hangup signals. 可以看到是“运行命令，忽略挂起信号”就是不挂断的运行，注意没有后台运行功能。</p>
<p>那么，我们可以巧妙的吧他们结合起来用就是<br>
nohup COMMAND &amp;<br>
这样就能使命令永久的在后台执行</p>
<h3 id="-u">-u</h3>
<p>python的输出进行了缓冲，导致message.log并不能够马上看到输出。<br>
为python添加-u 参数，使得python不启用缓冲。</p>
<h3 id="messagelog">message.log</h3>
<p>如果不填写的话，系统默认是写入到运行文件同位置output.out文件内，填写的话则会重定向到指定的文件</p>
<h3 id="21">2&gt;&amp;1</h3>
<ul>
<li>0 表示stdin标准输入，用户键盘输入的内容</li>
<li>1 表示stdout标准输出，输出到显示屏的内容</li>
<li>2 表示stderr标准错误，报错内容</li>
</ul>
<blockquote>
<p>2&gt;&amp;1是一个整体，&gt;左右不能有空格，即将错误内容重定向输入到标准输出中去。<br>
2&gt;&amp;1中的&amp;是为了区别文件1和1(标准输出)，假如为2&gt;1，就成了将错误内容输出到文件1中，而不是标准输出中。</p>
</blockquote>
<h2 id="其他">其他</h2>
<p>挂起后台进程以后想查看是否运行或者关闭该怎么办呢？别急，我们继续。</p>
<h2 id="查看进程">查看进程</h2>
<pre><code>ps aux | grep main.py
</code></pre>
<p><img src="https://zhx6.github.io/post-images/1640709726260.png" alt="查看进程PID" loading="lazy"><br>
main.py 是运行的文件<br>
可以看到PID是12526</p>
<h2 id="关闭进程">关闭进程</h2>
<pre><code>kill -9 12526
</code></pre>
<h2 id="实时追踪文件输出到屏幕">实时追踪文件输出到屏幕</h2>
<pre><code>tailf message.log
</code></pre>
]]></content>
    </entry>
</feed>